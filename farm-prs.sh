#!/usr/bin/env bash
set -euo pipefail

# ===== –ü–ê–†–ê–ú–ï–¢–†–´ =====
COUNT="${1:-3}"            # —Å–∫–æ–ª—å–∫–æ PR —Å–¥–µ–ª–∞—Ç—å –∑–∞ –∑–∞–ø—É—Å–∫
DIR="${DIR:-src/utils}"    # –∫—É–¥–∞ –∫–ª–∞–¥—ë–º js-—Ñ–∞–π–ª—ã
PREFIX="${PREFIX:-util}"   # –ø—Ä–µ—Ñ–∏–∫—Å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
BASE_BRANCH="${BASE_BRANCH:-main}" # –±–∞–∑–æ–≤–∞—è –≤–µ—Ç–∫–∞
AUTO_MERGE="${AUTO_MERGE:-true}"   # true|false ‚Äî —Å—Ä–∞–∑—É –º—ë—Ä–∂–∏—Ç—å PR
LABELS="${LABELS:-docs,chore}"     # –ª–µ–π–±–ª—ã –¥–ª—è issue
# =====================

need() { command -v "$1" >/dev/null 2>&1 || { echo "Need '$1' in PATH"; exit 1; }; }
need git
need gh

# –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
git rev-parse --is-inside-work-tree >/dev/null

# –•–µ–ª–ø–µ—Ä—ã –¥–ª—è stash, –µ—Å–ª–∏ –≥—Ä—è–∑–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –º–µ—à–∞–µ—Ç switch
has_changes() { test -n "$(git status --porcelain)"; }
stash_used=false
ensure_clean() {
  if has_changes; then
    git stash push -u -m "farm-autostash-$(date +%s)" >/dev/null
    stash_used=true
  fi
}
restore_stash() {
  if $stash_used; then
    git stash pop || echo "‚ö†Ô∏è  Stash pop had conflicts ‚Äî —Ä–∞–∑—Ä—É–ª–∏ –≤—Ä—É—á–Ω—É—é"
    stash_used=false
  fi
}

# –ê–≤—Ç–æ–∫–æ–º–º–∏—Ç —Å–∞–º–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω—ë–Ω
if git status --porcelain | grep -qE '(^|\s)farm-prs\.sh$'; then
  git add farm-prs.sh
  git commit -m "chore: add/update farming script" >/dev/null
fi

# –û–±–Ω–æ–≤–∏–º base –≤–µ—Ç–∫—É
ensure_clean
git fetch origin "$BASE_BRANCH" >/dev/null 2>&1 || true
git switch "$BASE_BRANCH" >/dev/null 2>&1 || git checkout "$BASE_BRANCH" >/dev/null 2>&1
git pull --ff-only || true
restore_stash

mkdir -p "$DIR"

summary=()

for i in $(seq 1 "$COUNT"); do
  RAND=$((RANDOM%9000+1000))
  TS="$(date +'%Y-%m-%d %H:%M:%S')"
  FILE="$PREFIX-$RAND.js"
  PATH_JS="$DIR/$FILE"
  BR="feat/$PREFIX-$RAND"
  ISSUE_TITLE="Feat: add $FILE"
  ISSUE_BODY="Add small helper $FILE with tiny function.
DX farming / clarity.
Random: $RAND"
  PR_TITLE="feat: add $FILE ($RAND)"

  # 1) –≥–µ–Ω–µ—Ä–∏–º –º–∞–ª–µ–Ω—å–∫–∏–π JS
  cat > "$PATH_JS" <<EOF
/**
 * Auto-generated helper ($FILE)
 * Created: $TS
 * Random: $RAND
 */
function ${PREFIX}${RAND}(input){
  return { id: $RAND, input };
}
if (typeof module !== 'undefined') {
  module.exports = { ${PREFIX}${RAND} };
}
EOF

  # 2) —Å–æ–∑–¥–∞—ë–º issue (–±–µ–∑ --json ‚Äî –ø–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏)
  ISSUE_OUT="$(gh issue create -t "$ISSUE_TITLE" -b "$ISSUE_BODY" -l "$LABELS" 2>/dev/null || true)"
  ISSUE_URL="$(printf '%s\n' "$ISSUE_OUT" | tail -n1 | tr -d '\r')"
  if printf '%s' "$ISSUE_URL" | grep -Eq '/issues/[0-9]+$'; then
    ISSUE_NUMBER="${ISSUE_URL##*/}"
  else
    echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä issue. –í—ã–≤–æ–¥ gh:"
    echo "$ISSUE_OUT"
    echo "üõ†  –ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ issue."
    ISSUE_NUMBER=""
  fi

  # 3) —Å–æ–∑–¥–∞—ë–º –≤–µ—Ç–∫—É
  ensure_clean
  git switch -c "$BR"
  restore_stash

  # 4) –∫–æ–º–º–∏—Ç
  git add -- "$PATH_JS"
  if [ -n "$ISSUE_NUMBER" ]; then
    git commit -m "feat: add $FILE $RAND (#$ISSUE_NUMBER)"
  else
    git commit -m "feat: add $FILE $RAND"
  fi

  # 5) push
  git push -u origin "$BR"

  # 6) PR (–ø–∞—Ä—Å–∏–º URL –∏–∑ –≤—ã–≤–æ–¥–∞ gh)
  PR_BODY=$'What\n- Add small helper '"$FILE"$'\n\nWhy\n- DX farming / clarity.\n\nNote\n- Random ID: '"$RAND"
  if [ -n "$ISSUE_NUMBER" ]; then
    PR_BODY+=$'\n\nLinks\n- Closes #'"$ISSUE_NUMBER"
  fi

  PR_OUT="$(gh pr create -t "$PR_TITLE" -b "$PR_BODY" -B "$BASE_BRANCH" -H "$BR" 2>/dev/null || true)"
  PR_URL="$(printf '%s\n' "$PR_OUT" | tr -d '\r' | grep -Eo 'https?://[^ ]+/pull/[0-9]+' | tail -n1)"

  if [ -z "$PR_URL" ]; then
    echo "‚ö†Ô∏è  PR –¥–ª—è –≤–µ—Ç–∫–∏ '$BR' –Ω–µ —Å–æ–∑–¥–∞–Ω. –í—ã–≤–æ–¥ gh:"
    echo "$PR_OUT"
  else
    echo "‚ñ∂ PR created: $PR_URL"
    if [ "$AUTO_MERGE" = "true" ]; then
      if gh pr merge --squash --delete-branch "$PR_URL"; then
        echo "   merged (squash) & branch deleted."
      else
        echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ—Ä–∂–∏—Ç—å $PR_URL ‚Äî –ø—Ä–æ–≤–µ—Ä—å —É—Å–ª–æ–≤–∏—è (checks, –ø—Ä–∞–≤–∞)."
      fi
    fi
  fi

  summary+=("‚Ä¢ $FILE ‚Üí ${PR_URL:-<no-pr>}")

  # 7) –Ω–∞–∑–∞–¥ –Ω–∞ base
  ensure_clean
  git switch "$BASE_BRANCH" >/dev/null 2>&1 || git checkout "$BASE_BRANCH" >/dev/null 2>&1
  git pull --ff-only >/dev/null 2>&1 || true
  restore_stash
done

echo
echo "‚úÖ Done. Created $COUNT JS file(s) and PR(s):"
for line in "${summary[@]}"; do echo "$line"; done